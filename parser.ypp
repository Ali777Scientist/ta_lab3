%{
#include <iostream>
#include <string>
#include <memory>

#include "../tree.h"
Node *global_root = nullptr;

extern int yylex();
void yyerror(const char *s) { std::cerr << "Ошибка: " << s << std::endl; }

%}
%code requires {
   #include "../tree.h" // Определение структуры Node
   #include <memory>
   #include <string>
}
%union {
    int int_val;
    char *str_val;
    int bool_val;
    Node *node;
}



%token <int_val> INT
%token <str_val> STRING
%nonassoc <str_val> ID
%token <bool_val> BOOL

%nonassoc '=' EQ
%left '+' '-'
%right INVERT


%token VARIANT
%token WHILE UNTIL IF COMMAND FUNC ENDFUNC CALL
%token CONVERT TO DIGITIZE PARAM RETURN
%token <int_val> T_BOOL T_DIGIT T_STRING
%token LOOKRIGHT LOOKUP LOOKLEFT LOOKDOWN RIGHT UP LEFT DOWN

%type program
%type <node> statements stm function control
%type <node> newvar var list expr_list expr_vars 
%type <node> expr oper move
%type <int_val> type

%%
	
program:
	statements {global_root = $1;}
	;

statements: statements stm {Stm temp($1->val, $2->val); $$ = makeNode(std::make_shared<Stm>(temp));}
	| stm {$$ = $1;}
	;
    
stm: newvar {$$ = $1;}
	| function {$$ = $1;}
	| oper {$$ = $1;}
	| control { $$ = $1; }
	;
	
oper: expr '=' expr { Equal temp($1->val, $3->val); $$ = makeNode(std::make_shared<Equal>(temp));}
	| CONVERT type TO type expr { Convert temp($2, $4, $5->val); $$ = makeNode(std::make_shared<Convert>(temp)); }
	| DIGITIZE expr { Digitize temp($2->val); $$ = makeNode(std::make_shared<Digitize>(temp)); }
	| COMMAND move { $$ = $2; }
	;
	
newvar: VARIANT ID '[' INT ']' '[' INT ']' '=' var { /*variable*/
	NewVar temp($2, $4, $7, $10->val); $$ = makeNode(std::make_shared<NewVar>(temp));
	}
	;
var: '{' list '}' {$$ = $2;}
	;
list: list ',' expr_list {List temp($1->val, $3->val); $$ = makeNode(std::make_shared<List>(temp));}
	| expr_list { $$ = $1; }
	;
expr_list: '{' expr_vars '}' { $$ = $2; }
	;
expr_vars: expr_vars ',' expr {Vars temp($1->val, $3->val); $$ = makeNode(std::make_shared<Vars>(temp));}
	| expr { $$ = $1; }
	;
	
expr: CALL ID expr { CFunc temp($2, $3->val); $$ = makeNode(std::make_shared<CFunc>(temp)); }
	| '(' expr ')' { $$ = $2; }
	| expr '+' expr { Plus temp($1->val, $3->val); $$ = makeNode(std::make_shared<Plus>(temp)); }
	| expr '-' expr { Minus temp($1->val, $3->val); $$ = makeNode(std::make_shared<Minus>(temp)); }
	| '!' expr %prec INVERT { Invert temp($2->val); $$ = makeNode(std::make_shared<Invert>(temp)); }
	| expr EQ expr { Eq temp($1->val, $3->val); $$ = makeNode(std::make_shared<Eq>(temp)); }
	| ID '[' INT ']' '[' INT ']' { Var temp($1, $3, $6); $$ = makeNode(std::make_shared<Var>(temp)); }
	| INT { INTv temp($1); $$ = makeNode(std::make_shared<INTv>(temp)); }
	| BOOL { BOOLv temp($1); $$ = makeNode(std::make_shared<BOOLv>(temp)); }
	| STRING { STRINGv temp($1); $$ = makeNode(std::make_shared<STRINGv>(temp)); }
	| LOOKRIGHT { Look temp(1); $$ = makeNode(std::make_shared<Look>(temp)); }/*Look directions*/
	| LOOKUP { Look temp(2); $$ = makeNode(std::make_shared<Look>(temp)); }
	| LOOKLEFT { Look temp(3); $$ = makeNode(std::make_shared<Look>(temp)); }
	| LOOKDOWN { Look temp(4); $$ = makeNode(std::make_shared<Look>(temp)); }
	| PARAM { Param temp(0); $$ = makeNode(std::make_shared<Param>(temp)); }
	;
	
function: FUNC ID statements ENDFUNC { NewFunc temp($2, $3->val); $$ = makeNode(std::make_shared<NewFunc>(temp)); }
	| RETURN expr { Return temp($2->val); $$ = makeNode(std::make_shared<Return>(temp)); }
	;
	
control: WHILE expr '{' statements '}' { While temp(true, $2->val, $4->val); $$ = makeNode(std::make_shared<While>(temp)); }
	| UNTIL expr '{' statements '}' { While temp(false, $2->val, $4->val); $$ = makeNode(std::make_shared<While>(temp)); }
	| IF expr '{' statements '}' { If temp($2->val, $4->val); $$ = makeNode(std::make_shared<If>(temp));}
	;
	
type: T_BOOL { $$ = $1; }
	| T_DIGIT { $$ = $1; }
	| T_STRING { $$ = $1; }
	;
	
move: RIGHT { Move temp(1); $$ = makeNode(std::make_shared<Move>(temp)); }
	| UP { Move temp(2); $$ = makeNode(std::make_shared<Move>(temp)); }
	| LEFT { Move temp(3); $$ = makeNode(std::make_shared<Move>(temp)); }
	| DOWN { Move temp(4); $$ = makeNode(std::make_shared<Move>(temp)); }
	;


%%

